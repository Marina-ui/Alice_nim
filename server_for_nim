from flask import Flask, request
import json
import random as r


app = Flask(__name__)


storage = {}


@app.route('/', methods=['POST'])
def main():
    req = request.json
    user_id = req["session"]["user_id"]

    if req["session"]["new"]:
        storage[user_id] = {'victories': 0, 'defeats': 0, 'mode': 'new'}   #можно будет подвести итог всем играм
        return generate_response(req, "Пожалуйста, выберите режим из списка: Обучение, Игра с Алисой.")

    context = storage[user_id]
    answer = req["request"]["original_utterance"].lower()

    if answer not in {'обучение', 'игра с алисой'} and context['mode'] == 'new':
        return generate_response(req, "Необходимо выбрать режим из списка.")

    if answer == 'обучение' and context['mode'] == 'new':
        #запускается сценарий обучения
        pass

    elif answer == 'игра с алисой' and context['mode'] == 'new':
        #создаём контекст игры, запрашиваем кол-во кучек
        context['mode'] = 'игра'
        context['kuchki'] = 0
        return generate_response(req, 'Всегда рада с вами поиграть. Выберите количество кучек: одна или две')

    elif (answer == 'одна' or answer == 'одна кучка') and context['kuchki'] == 0 and context['mode'] == 'игра': #формируем игру на одну кучку
        #записываем в контекст оставшиеся параметры, озвучиваем правила
        context['kuchki'] = 1
        context['chips_1'] = r.randint(15, 30)  # диапазон камней
        context['max_chips_out'] = r.randint(3, 5)  # максимальное колво забираемых камней
        return generate_response(req, 'Одна, так одна. Вам объяснить правила?')

    elif (answer == 'две' or answer == 'две кучки') and context['kuchki'] == 0 and context['mode'] == 'игра': #формируем игру на две кучки
        context['kuchki'] = 2
        context['chips_1'] = r.randint(10, 30)  # диапазон камней
        context['chips_2'] = r.randint(10, 30)
        context['max_chips_out'] = r.randint(3, 5)  # максимальное колво забираемых камней
        return generate_response(req, 'Две, так две. Вам объяснить правила?')

    elif (answer == 'да' or answer == 'объясни') and context['mode'] == 'игра' and context['kuchki'] in [1, 2]:
        #объясняем правила для 1 и 2 куч, Алиса делает первый ход
        kuchki = context['kuchki']
        if kuchki == 1:
            chips_1 = context['chips_1']
            chips_out = context['max_chips_out']
            motion = generate_motion(1, chips_1, chips_out, give_up=True)
            context['chips_1'] -= motion[1]
            rules = f'Объясняю: всего {chips_1} фишек в куче. Мы по очереди берём 1-{chips_out} фишек.' \
                f'Выиграет тот, кто заберёт последнюю. Давайте, я начну. Беру {motion[0]}. Осталось {motion[1]}.' \
                f'Теперь ваш ход. Сколько фишек вы забираете?'
            return generate_response(req, rules)
        elif kuchki == 2:
            chips_1 = context['chips_1']
            chips_2 = context['chips_2']
            chips_out = context['max_chips_out']

            motion = generate_motion(2, chips_1, chips_out, chips_2, give_up=True)      # ТУТ ПОПРАВИТЬ ЛОГИКУ ДЛЯ 2-Х КУЧ
            context['chips_1'] -= motion[1]

            rules = f'Объясняю: всего {chips_1} фишек в первой куче и {chips_2} во второй. Мы по очереди берём 1-{chips_out} фишек из любой кучи.' \
                    f'Выиграет тот, кто заберёт последнюю. Давайте, я начну. Беру {motion[0]}. Осталось {motion[1]}.' \   
                    f'Теперь ваш ход. Сначала скажите из какой кучи, а затем сколько фишек вы берете'
            # ПОПРАВИТЬ ВЫВОД И ЛОГИКУ ^^^
            return generate_response(req, rules)

    elif (answer == 'нет' or answer == 'не нужно') and context['mode'] == 'игра' and context['kuchki'] in [1, 2]:
        #Алиса делает первый ход
        kuchki = context['kuchki']
        if kuchki == 1:
            chips_1 = context['chips_1']
            chips_out = context['max_chips_out']
            motion = generate_motion(1, chips_1, chips_out, give_up=True)    
            context['chips_1'] -= motion[1]
            text = f'Хорошо, тогда я начну. Беру {motion[0]}. Осталось {motion[1]}. Теперь ваш ход.'
            return generate_response(req, text)

        elif kuchki == 2:
            chips_1 = context['chips_1']
            chips_2 = context['chips_2']
            chips_out = context['max_chips_out']
            
            motion = generate_motion(1, chips_1, chips_out, give_up=True)             #  ПОПРАВИТЬ ЛОГИКУ ДЛЯ 2-x КУЧ
            context['chips_1'] -= motion[1]
            text = f'Хорошо, тогда я начну. Беру {motion[0]}. Осталось {motion[1]}. Теперь ваш ход.'
            return generate_response(req, text)

    #...

    else:
        return generate_response(req, 'Неправильный формат ответа. Пожалуйста, повторите.')


    #return generate_response(req, result, end_session=True)


def generate_response(req, text, end_session=False):
    res = {
        "version": req["version"],
        "session": req["session"],
        "response": {
            "end_session": end_session,
            "text": text
        }
    }
    return json.dumps(res, indent=2)


def generate_motion(kuchki, chips_1, chips_out, chips_2=0, give_up=False):   #генерирует ход Алисы
    if kuchki == 1 and give_up:           #первым ходом создаём выигрышную позицию для игрока в игре с одной кучкой
        ost = chips_1 % (chips_out + 1)
        if ost == 0:
            motion = r.randint(1, chips_out)
        elif ost > 1:
            motion = r.randint(1, ost - 1)
        else:
            motion = r.randint(2, chips_out)

    elif kuchki == 1 and chips_1 > chips_out:        #пытаемся привести игрока в проигрышную позицию
        ost = chips_1 % (chips_out + 1)
        if ost == 0:
            motion = r.randint(1, chips_out)
        else:
            motion = ost

    elif kuchki == 1 and chips_1 < chips_out:    #берём последние
        motion = chips_1

    elif kuchki == 2 and give_up:     #ходы при игре с двумя кучками С ПОДДАВКАМИ ОТ АЛИСЫ
        pass

    elif kuchki == 1 and chips_1 > chips_out:

    chips_1 -= motion
    return (motion, chips_1)


if __name__ == '__main__':
    app.run('0.0.0.0', 8080)
